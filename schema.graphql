input PointInput {
  x: Float!
  y: Float!
}

input AreaInput {
  start: PointInput!
  end: PointInput!
  scale: Int
}

input OrganismFilter {
  area: AreaInput
}

type Point {
  x: Float!
  y: Float!
}

type IterationProcreation {
  canProcreate: Boolean!
  maxCd: Int!
  maxHeight: Float!
  minCd: Int!
  minHeight: Float!
  species: [Species!]!
}

type IterationWaste {
  maxTolerance: Float!
  minTolerance: Float!
  toxicity: Float!
}

type Iteration {
  aliveCellCount: Int!
  cellCount: Int!
  number: Int!
  procreation: IterationProcreation!
  waste: IterationWaste!
}

type Species {
  id: Int!
  cellTypes: [CellType!]!
  diet: [String!]!
  emergedAt: Int!
  name: String!
  organisms: [Organism!]!
}

type Organism {
  id: Int!
  bornAt: Int!
  cells: [Cell!]!
  position: Point!
  species: Species!
}

type CellType {
  id: Int!
  diet: [String!]!
  funghi: Int!
  herbivore: Int!
}

type Cell {
  id: Int!
  alive: Boolean!
  hp: Int!
  position: Point!
  type: CellType!
}

type SpeciesGridElement {
  position: Point!
  species: [Species!]!
}

type Query {
  organism(id: Int!): Organism
  organismList(filter: OrganismFilter): [Organism!]!

  species(id: Int!): Species
  speciesList: [Species!]!
  speciesGrid(area: AreaInput!): [SpeciesGridElement!]!

  iteration: Iteration!
}

schema {
  query: Query
}
